'\" t
.\"     Title: zstr
.\"    Author: [see the "AUTHORS" section]
.\" Generator: DocBook XSL Stylesheets v1.76.1 <http://docbook.sf.net/>
.\"      Date: 06/01/2015
.\"    Manual: CZMQ Manual
.\"    Source: CZMQ 3.0.1
.\"  Language: English
.\"
.TH "ZSTR" "3" "06/01/2015" "CZMQ 3\&.0\&.1" "CZMQ Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
zstr \- sending and receiving strings
.SH "SYNOPSIS"
.sp
.nf
//  Receive C string from socket\&. Caller must free returned string using
//  zstr_free()\&. Returns NULL if the context is being terminated or the
//  process was interrupted\&.
CZMQ_EXPORT char *
    zstr_recv (void *source);

//  Send a C string to a socket, as a frame\&. The string is sent without
//  trailing null byte; to read this you can use zstr_recv, or a similar
//  method that adds a null terminator on the received string\&. String
//  may be NULL, which is sent as ""\&.
CZMQ_EXPORT int
    zstr_send (void *dest, const char *string);

//  Send a C string to a socket, as zstr_send(), with a MORE flag, so that
//  you can send further strings in the same multi\-part message\&.
CZMQ_EXPORT int
    zstr_sendm (void *dest, const char *string);

//  Send a formatted string to a socket\&. Note that you should NOT use
//  user\-supplied strings in the format (they may contain \*(Aq%\*(Aq which
//  will create security holes)\&.
CZMQ_EXPORT int
    zstr_sendf (void *dest, const char *format, \&.\&.\&.);

//  Send a formatted string to a socket, as for zstr_sendf(), with a
//  MORE flag, so that you can send further strings in the same multi\-part
//  message\&.
CZMQ_EXPORT int
    zstr_sendfm (void *dest, const char *format, \&.\&.\&.);

//  Send a series of strings (until NULL) as multipart data
//  Returns 0 if the strings could be sent OK, or \-1 on error\&.
CZMQ_EXPORT int
    zstr_sendx (void *dest, const char *string, \&.\&.\&.);

//  Receive a series of strings (until NULL) from multipart data\&.
//  Each string is allocated and filled with string data; if there
//  are not enough frames, unallocated strings are set to NULL\&.
//  Returns \-1 if the message could not be read, else returns the
//  number of strings filled, zero or more\&. Free each returned string
//  using zstr_free()\&. If not enough strings are provided, remaining
//  multipart frames in the message are dropped\&.
CZMQ_EXPORT int
    zstr_recvx (void *source, char **string_p, \&.\&.\&.);

//  Free a provided string, and nullify the parent pointer\&. Safe to call on
//  a null pointer\&.
CZMQ_EXPORT void
    zstr_free (char **string_p);

//  Self test of this class
CZMQ_EXPORT void
    zstr_test (bool verbose);
.fi
.SH "DESCRIPTION"
.sp
The zstr class provides utility functions for sending and receiving C strings across 0MQ sockets\&. It sends strings without a terminating null, and appends a null byte on received strings\&. This class is for simple message sending\&.
.sp
.if n \{\
.RS 4
.\}
.nf
       Memory                       Wire
       +\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-+          +\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-+
Send   | S t r i n g | 0 |  \-\-\-\->   | 6 | S t r i n g |
       +\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-+          +\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-+
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
       Wire                         Heap
       +\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-+          +\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-+
Recv   | 6 | S t r i n g |  \-\-\-\->   | S t r i n g | 0 |
       +\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-+          +\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-+
.fi
.if n \{\
.RE
.\}
.SH "EXAMPLE"
.PP
\fBFrom zstr_test method\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
//  Create two PAIR sockets and connect over inproc
zsock_t *output = zsock_new_pair ("@inproc://zstr\&.test");
assert (output);
zsock_t *input = zsock_new_pair (">inproc://zstr\&.test");
assert (input);

//  Send ten strings, five strings with MORE flag and then END
int string_nbr;
for (string_nbr = 0; string_nbr < 10; string_nbr++)
    zstr_sendf (output, "this is string %d", string_nbr);
zstr_sendx (output, "This", "is", "almost", "the", "very", "END", NULL);

//  Read and count until we receive END
string_nbr = 0;
for (string_nbr = 0;; string_nbr++) {
    char *string = zstr_recv (input);
    assert (string);
    if (streq (string, "END")) {
        zstr_free (&string);
        break;
    }
    zstr_free (&string);
}
assert (string_nbr == 15);

zsock_destroy (&input);
zsock_destroy (&output);
.fi
.if n \{\
.RE
.\}
.sp
.SH "AUTHORS"
.sp
The czmq manual was written by the authors in the AUTHORS file\&.
.SH "RESOURCES"
.sp
Main web site: \m[blue]\fB\%\fR\m[]
.sp
Report bugs to the email <\m[blue]\fBzeromq\-dev@lists\&.zeromq\&.org\fR\m[]\&\s-2\u[1]\d\s+2>
.SH "COPYRIGHT"
.sp
Copyright (c) 1991\-2012 iMatix Corporation \-\- http://www\&.imatix\&.com Copyright other contributors as noted in the AUTHORS file\&. This file is part of CZMQ, the high\-level C binding for 0MQ: http://czmq\&.zeromq\&.org This Source Code Form is subject to the terms of the Mozilla Public License, v\&. 2\&.0\&. If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla\&.org/MPL/2\&.0/\&. LICENSE included with the czmq distribution\&.
.SH "NOTES"
.IP " 1." 4
zeromq-dev@lists.zeromq.org
.RS 4
\%mailto:zeromq-dev@lists.zeromq.org
.RE
